Weather cu citire din fisier si filtru


controllers

import com.sd.laborator.interfaces.CityListInterface
import com.sd.laborator.interfaces.LocationSearchInterface
import com.sd.laborator.interfaces.OrchestratorServiceInterface
import com.sd.laborator.interfaces.WeatherForecastInterface
import com.sd.laborator.pojo.WeatherForecastData
import com.sd.laborator.services.TimeService
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import org.springframework.web.bind.annotation.ResponseBody

@Controller
class WeatherAppController {
    @Autowired
    private lateinit var orchestratorService: OrchestratorServiceInterface

    @RequestMapping("/getforecast/{location}", method = [RequestMethod.GET])
    @ResponseBody
    fun getForecast(@PathVariable location: String): String {
        // se incearca preluarea WOEID-ului locaţiei primite in URL
        // pe baza ID-ului de locaţie, se interoghează al doilea serviciu care returnează datele meteo
        // încapsulate într-un obiect POJO
        val rawForecastData: WeatherForecastData = orchestratorService.getForecastData(location)

        // fiind obiect POJO, funcţia toString() este suprascrisă pentru o afişare mai prietenoasă
        return rawForecastData.toString()
    }

    // path for testing the City List Service
    @RequestMapping("/regressionangle", method = [RequestMethod.GET])
    @ResponseBody
    fun getRegressionAngle(): Double {
        val angle = orchestratorService.getRegressionAngle()

        // fiind obiect POJO, funcţia toString() este suprascrisă pentru o afişare mai prietenoasă
        return angle
    }

}



filters

import com.sd.laborator.interfaces.FilterInterface
import com.sd.laborator.pojo.WeatherForecastData

class NotNullHumidityFilter: FilterInterface {
    override fun execute(weatherForecastData: WeatherForecastData): Boolean {
        if(weatherForecastData.humidity == null)
            return false
        return true
    }
}
import com.sd.laborator.interfaces.FilterInterface
import com.sd.laborator.pojo.WeatherForecastData

class NotNullMaxTemperatureFilter: FilterInterface {
    override fun execute(weatherForecastData: WeatherForecastData): Boolean {
        if(weatherForecastData.maxTemp == null)
            return false
        return true
    }
}




interfaces

import java.io.File

interface CityListInterface {
    fun getCityList(): List<String>
}
interface FilterInterface {
    fun execute(weatherForecastData: WeatherForecastData): Boolean
}

import com.sd.laborator.pojo.WeatherForecastData
import java.io.File

interface LiniarRegressionInterface {
    fun getRegressionAngle(forecastList : List<WeatherForecastData>): Double
}


interface LocationSearchInterface {
    fun getLocationId(locationName: String): Int
}

interface OrchestratorServiceInterface {
    fun getForecastData(locationName: String): WeatherForecastData

    // Foloseste serviciul LiniarRegressionService pentru a obtine unghiul regresiei
    fun getRegressionAngle(): Double
}


interface WeatherForecastInterface {
    fun getForecastData(locationId: Int): WeatherForecastData
}



pojo

data class WeatherForecastData (
    var location: String,
    var date: String?,
    var weatherState: String?,
    var weatherStateIconURL: String?,
    var windDirection: String?,
    var windSpeed: Int?, // km/h
    var minTemp: Int?, // grade celsius
    var maxTemp: Int?,
    var currentTemp: Int?,
    var humidity: Int? // procent
)




resources
-fisier txt cu lista de orase


services

import com.sd.laborator.interfaces.CityListInterface
import com.sd.laborator.interfaces.LocationSearchInterface
import org.springframework.stereotype.Service
import java.net.URL
import org.json.JSONObject
import java.io.File
import java.net.URLEncoder
import java.nio.charset.StandardCharsets

@Service
class CityListService : CityListInterface {
    private val file = File("src/main/kotlin/com/sd/laborator/resources/cities.txt")

    override fun getCityList(): List<String> {
        val cityList = mutableListOf<String>()
        file.forEachLine { cityList.add(it) }
        return cityList

    }
}
import com.sd.laborator.interfaces.CityListInterface
import com.sd.laborator.interfaces.FilterInterface
import com.sd.laborator.interfaces.LocationSearchInterface
import com.sd.laborator.pojo.WeatherForecastData
import org.springframework.stereotype.Service
import java.net.URL
import org.json.JSONObject
import java.io.File
import java.net.URLEncoder
import java.nio.charset.StandardCharsets

@Service
class CityToWeatherForecastDataFilterService(private val weatherForecastService: WeatherForecastService,
                                             private val locationSearchService: LocationSearchService,
                                             private val timeService: TimeService){


    fun getWeatherDataFromCityList(cityList: List<String>, filterList:List<FilterInterface>): List<WeatherForecastData> {
        // pentru fiecare, il tranform in pojo
        val pojoList:MutableList<WeatherForecastData> = mutableListOf()
        cityList.forEach { city ->
            // obtinem forecast data dupa orasul respectiv
            val locationId = locationSearchService.getLocationId(city)

            val result:WeatherForecastData
            // dacă locaţia nu a fost găsită, răspunsul va fi corespunzător
            if (locationId == -1) {
                result = WeatherForecastData(
                    city,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
                )
            }
            else
            {
                // pe baza ID-ului de locaţie, se interoghează al doilea serviciu care returnează datele meteo
                // încapsulate într-un obiect POJO
                result = weatherForecastService.getForecastData(locationId)

                // Actualizez data
                result.date = timeService.getCurrentTime()
            }
            pojoList.add(result)
        }

        // Apply filters
        var resultList:List<WeatherForecastData> = pojoList
        filterList.forEach{filter ->
            resultList = resultList.filter { filter.execute(it) }.toList()
        }
        return resultList
    }
}

import com.sd.laborator.interfaces.CityListInterface
import com.sd.laborator.interfaces.LiniarRegressionInterface
import com.sd.laborator.interfaces.LocationSearchInterface
import com.sd.laborator.pojo.WeatherForecastData
import org.springframework.stereotype.Service
import java.net.URL
import org.json.JSONObject
import java.io.File
import java.lang.Math.atan
import java.net.URLEncoder
import java.nio.charset.StandardCharsets

@Service
class LiniarRegressionService : LiniarRegressionInterface {
    override fun getRegressionAngle(forecastList: List<WeatherForecastData>): Double {
        // Apply filters bla bla
        // Humidity not null filter
        // MatTemp not null filter

        // Evaluate regression over Humidity and MaxTemp
        // 1 - find means
        var meanX = 0.0
        forecastList.forEach { it -> meanX += it.humidity!! }
        meanX /= forecastList.size

        var meanY = 0.0
        forecastList.forEach { it -> meanY += it.maxTemp!! }
        meanY /= forecastList.size

        // 2 - find variance
        var varianceX = 0.0
        forecastList.forEach { it -> varianceX += (it.humidity!! - meanX) * (it.humidity!! - meanX) }

        // 3 - find covariance
        var covariance = 0.0
        forecastList.forEach { it -> covariance += (it.humidity!! - meanX) * (it.maxTemp!! - meanY) }

        // 4 - get angle tangent coefficient
        val a = covariance/varianceX

        // 5 - get angle value
        val angle = atan(a.toDouble())

        return angle
    }
}
import com.sd.laborator.interfaces.LocationSearchInterface
import org.springframework.stereotype.Service
import java.net.URL
import org.json.JSONObject
import java.net.URLEncoder
import java.nio.charset.StandardCharsets

@Service
class LocationSearchService : LocationSearchInterface {
    override fun getLocationId(locationName: String): Int {
        // codificare parametru URL (deoarece poate conţine caractere speciale)
        val encodedLocationName = URLEncoder.encode(locationName, StandardCharsets.UTF_8.toString())

        // construire obiect de tip URL
        val locationSearchURL = URL("https://www.metaweather.com/api/location/search/?query=$encodedLocationName")

        // preluare raspuns HTTP (se face cerere GET şi se preia conţinutul răspunsului sub formă de text)
        val rawResponse: String = locationSearchURL.readText()

        // parsare obiect JSON
        val responseRootObject = JSONObject("{\"data\": ${rawResponse}}")
        val responseContentObject = responseRootObject.getJSONArray("data").takeUnless { it.isEmpty }
            ?.getJSONObject(0)
        return responseContentObject?.getInt("woeid") ?: -1
    }
}

import com.sd.laborator.filters.NotNullHumidityFilter
import com.sd.laborator.filters.NotNullMaxTemperatureFilter
import com.sd.laborator.interfaces.CityListInterface
import com.sd.laborator.interfaces.FilterInterface
import com.sd.laborator.interfaces.LocationSearchInterface
import com.sd.laborator.interfaces.OrchestratorServiceInterface
import com.sd.laborator.pojo.WeatherForecastData
import org.springframework.stereotype.Service
import java.net.URL
import org.json.JSONObject
import java.net.URLEncoder
import java.nio.charset.StandardCharsets

@Service
class OrchestratorService(private val weatherForecastService: WeatherForecastService,
                          private val locationSearchService: LocationSearchService,
                          private val timeService: TimeService,
                          private val cityListService: CityListService,
                          private val liniarRegressionService: LiniarRegressionService,
                          private val cityToWeatherForecastDataFilterService: CityToWeatherForecastDataFilterService) : OrchestratorServiceInterface {

    override fun getForecastData(locationName: String): WeatherForecastData {
        val locationId = locationSearchService.getLocationId(locationName)

        // dacă locaţia nu a fost găsită, răspunsul va fi corespunzător
        if (locationId == -1) {
            return WeatherForecastData(
                locationName,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
            )
        }

        // pe baza ID-ului de locaţie, se interoghează al doilea serviciu care returnează datele meteo
        // încapsulate într-un obiect POJO
        val rawForecastData: WeatherForecastData = weatherForecastService.getForecastData(locationId)

        // Actualizez data
        rawForecastData.date = timeService.getCurrentTime()

        return rawForecastData
    }

    override fun getRegressionAngle(): Double {
        // obtin lista de orase
        val cityList = cityListService.getCityList()

        val filters = listOf<FilterInterface>(NotNullMaxTemperatureFilter(), NotNullHumidityFilter())

        // pentru fiecare, il tranform in pojo
        val pojoList:List<WeatherForecastData> = cityToWeatherForecastDataFilterService
                                                .getWeatherDataFromCityList(cityList, filters)

        // utilizand lista de pojo-uri, obtin unghiul necesar
        return liniarRegressionService.getRegressionAngle(pojoList)
    }
}
import org.springframework.stereotype.Service
import java.text.SimpleDateFormat
import java.util.*

@Service
class TimeService {
    fun getCurrentTime():String {
        val formatter =  SimpleDateFormat("dd/MM/yyyy HH:mm:ss")
        return formatter.format(Date())
    }
}
import com.sd.laborator.interfaces.WeatherForecastInterface
import com.sd.laborator.pojo.WeatherForecastData
import org.json.JSONObject
import org.springframework.stereotype.Service
import java.net.URL
import kotlin.math.roundToInt

@Service
class WeatherForecastService : WeatherForecastInterface {
    override fun getForecastData(locationId: Int): WeatherForecastData {
        // ID-ul locaţiei nu trebuie codificat, deoarece este numeric
        val forecastDataURL = URL("https://www.metaweather.com/api/location/$locationId/")

        // preluare conţinut răspuns HTTP la o cerere GET către URL-ul de mai sus
        val rawResponse: String = forecastDataURL.readText()

        // parsare obiect JSON primit
        val responseRootObject = JSONObject(rawResponse)
        val weatherDataObject = responseRootObject.getJSONArray("consolidated_weather").getJSONObject(0)

        // construire şi returnare obiect POJO care încapsulează datele meteo
        return WeatherForecastData(
            location = responseRootObject.getString("title"),
            date = null,
            weatherState = weatherDataObject.getString("weather_state_name"),
            weatherStateIconURL =
                "https://www.metaweather.com/static/img/weather/png/${weatherDataObject.getString("weather_state_abbr")}.png",
            windDirection = weatherDataObject.getString("wind_direction_compass"),
            windSpeed = weatherDataObject.getFloat("wind_speed").roundToInt(),
            minTemp = weatherDataObject.getFloat("min_temp").roundToInt(),
            maxTemp = weatherDataObject.getFloat("max_temp").roundToInt(),
            currentTemp = weatherDataObject.getFloat("the_temp").roundToInt(),
            humidity = weatherDataObject.getFloat("humidity").roundToInt()
        )
    }
}



WeatherApp


import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication

@SpringBootApplication
open class WeatherApp

fun main(args: Array<String>) {
    runApplication<WeatherApp>()
}
