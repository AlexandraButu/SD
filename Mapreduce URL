mapper

import string

import requests
from bs4 import BeautifulSoup


def main():
    urls = [
        "https://ro.wikipedia.org/wiki/Pandemia_de_COVID-19_%C3%AEn_Rom%C3%A2nia",
        "https://en.wikipedia.org/wiki/Microservices",
        "http://mike.tuiasi.ro/",
        "https://microservices.io/patterns/microservices.html",
        "https://dzone.com/articles/design-patterns-for-microservices-1",
        "https://docs.python.org/3.3/library/stdtypes.html?highlight=maketrans#str.maketrans"
    ]
    for url in urls:
        page_content = requests.get(url).content
        soup = BeautifulSoup(page_content, "lxml")
        for tag in soup.find_all("div"):
            table = str.maketrans("", "", string.punctuation)
            words = list(map(lambda s: s.strip().translate(table), tag.text.split(" ")))
            for word in words:
                if word not in string.punctuation:
                    print("{} {} 1".format(word, url))


if __name__ == "__main__":
    main()



reducer

import sys


def main():
    dict_result = {}
    fp = open("result.txt", "w")
    for line in sys.stdin:
        line = line.strip("\n")
        data = line.split(" ")
        if data[0] == "":
            continue
        if len(data) != 3:
            continue
        if data[0] in dict_result:
            aux = dict_result[data[0]]
            if data[1] in aux:
                dict_result[data[0]][data[1]] += int(data[2])
            else:
                dict_result[data[0]][data[1]] = int(data[2])
        else:
            dict_result[data[0]] = {data[1]: int(data[2])}
    for key in dict_result:
        fp.write("<{}, {}>\n".format(key, dict_result[key]))
    fp.close()


if __name__ == "__main__":
    main()


requirements
requests
beautifulsoup4
