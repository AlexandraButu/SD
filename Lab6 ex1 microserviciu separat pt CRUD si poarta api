components

package com.sd.laborator.components

import org.springframework.amqp.rabbit.connection.CachingConnectionFactory
import org.springframework.amqp.rabbit.connection.ConnectionFactory
import org.springframework.amqp.rabbit.core.RabbitTemplate
import org.springframework.beans.factory.annotation.Value
import org.springframework.context.annotation.Bean
import org.springframework.stereotype.Component

@Component
class RabbitMqComponent {
    @Value("\${spring.rabbitmq.host}")
    private lateinit var host: String
    @Value("\${spring.rabbitmq.port}")
    private val port: Int = 0
    @Value("\${spring.rabbitmq.username}")
    private lateinit var username: String
    @Value("\${spring.rabbitmq.password}")
    private lateinit var password: String
    @Value("\${sqliteexample.rabbitmq.exchange}")
    private lateinit var exchange: String
    @Value("\${sqliteexample.rabbitmq.routingkey}")
    private lateinit var routingKey: String

    fun getExchange(): String = this.exchange

    fun getRoutingKey(): String = this.routingKey

    @Bean
    private fun connectionFactory(): ConnectionFactory {
        val connectionFactory = CachingConnectionFactory()
        connectionFactory.host = this.host
        connectionFactory.username = this.username
        connectionFactory.setPassword(this.password)
        connectionFactory.port = this.port
        return connectionFactory
    }

    @Bean
    fun rabbitTemplate(): RabbitTemplate = RabbitTemplate(connectionFactory())
}




interfaces

package com.sd.laborator.interfaces

import com.sd.laborator.model.Beer

interface BeerDAO {
    // Create
    fun createBeerTable()
    fun addBeer(beer: Beer)

    // Retrieve
    fun getBeers(): String
    fun getBeerByName(name: String): String?
    fun getBeerByPrice(price: Float): String?

    // Update
    fun updateBeer(beer: Beer)

    // Delete
    fun deleteBeer(name: String)
}



microservices

import com.sd.laborator.interfaces.BeerDAO
import com.sd.laborator.model.Beer
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.*

@Controller
class BeerAddMicroservice {
    @Autowired
    private lateinit var beerDAO: BeerDAO

    @RequestMapping(value = ["/addbeermicroservice"], method = [RequestMethod.POST])
    @ResponseBody
    fun addBeer(@RequestParam beer: Map<String, String>){
        beerDAO.addBeer(
            Beer(
                id = -1,
                name = beer["name"].toString(),
                price = beer["price"]?.toFloat()!!
            )
        )
    }
}


import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.*

@Controller
class BeerCRUDMicroservice {
    @RequestMapping(value = ["/getbeers"], method = [RequestMethod.GET])
    @ResponseBody
    fun getBeers(): String {
        return khttp.get("http://localhost:8080/getbeersmicroservice").text
    }

    @RequestMapping(value = ["/getbeerbyname/{name}"], method = [RequestMethod.GET])
    @ResponseBody
    fun getBeerByName(@PathVariable name: String): String {
        return khttp.get("http://localhost:8080/getbeerbynamemicroservice/$name").text
    }

    @RequestMapping(value = ["/getbeerbyprice/{price}"], method = [RequestMethod.GET])
    @ResponseBody
    fun getBeerByPrice(@PathVariable price: Float): String {
        return khttp.get("http://localhost:8080/getbeerbypricemicroservice/$price").text
    }

    @RequestMapping(value = ["/addbeer"], method = [RequestMethod.POST])
    @ResponseBody
    fun addBeer(@RequestParam beer: Map<String, String>) {
        khttp.post("http://localhost:8080/addbeermicroservice", data = beer)
    }

    @RequestMapping(value = ["/updatebeer"], method = [RequestMethod.PUT])
    @ResponseBody
    fun updateBeer(@RequestParam beer: Map<String, String>) {
        khttp.put("http://localhost:8080/updatebeermicroservice", data = beer)
    }

    @RequestMapping(value = ["/deletebeer/{name}"], method = [RequestMethod.DELETE])
    @ResponseBody
    fun deleteBeer(@PathVariable name: String) {
        khttp.delete("http://localhost:8080/deletebeermicroservice/$name")
    }
}

import com.sd.laborator.components.RabbitMqComponent
import com.sd.laborator.interfaces.BeerDAO
import com.sd.laborator.model.Beer
import org.springframework.amqp.core.AmqpTemplate
import org.springframework.amqp.rabbit.annotation.RabbitListener
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Component

@Component
class BeerDAOMicroservice {
    @Autowired
    private lateinit var beerDAO: BeerDAO

    @Autowired
    private lateinit var rabbitMqComponent: RabbitMqComponent

    private lateinit var amqpTemplate: AmqpTemplate

    @Autowired
    fun initTemplate() {
        this.amqpTemplate = rabbitMqComponent.rabbitTemplate()
    }
    //citesc din queue1
    // scriu in queue
    @RabbitListener(queues = ["\${sqliteexample.rabbitmq.queue}"])
    fun recieveMessage(msg: String) {
        val processed_msg = (msg.split(",").map { it.toInt().toChar() }).joinToString(separator="")
        val (operation, parameters) = processed_msg.split('~')
        var beer: Beer? = null
        var price: Float? = null
        var name: String? = null

        // id=1;name=Corona;price=3.6
        if("id=" in parameters) {
            println(parameters)
            val params: List<String> = parameters.split(';')
            try {
                beer = Beer(
                    params[0].split('=')[1].toInt(),
                    params[1].split('=')[1],
                    params[2].split('=')[1].toFloat()
                )
            } catch (e: Exception) {
                print("Error parsing the parameters: ")
                println(params)
                return
            }
        } else if ("price=" in parameters) {
            price = parameters.split('=')[1].toFloat()
        } else if ("name=" in parameters) {
            name = parameters.split("=")[1]
        }
        println(parameters)
        println(name)
        println(price)
        println(beer)
        var result: Any? = when(operation) {
            "createBeerTable" -> beerDAO.createBeerTable()
            "addBeer" -> khttp.post("http://localhost:8080/addbeer", data = mapOf("name" to beer?.beerName, "price" to beer?.beerPrice.toString()))
            "getBeers" -> khttp.get("http://localhost:8080/getbeers").text
            "getBeerByName" -> khttp.get("http://localhost:8080/getbeerbyname/$name").text
            "getBeerByPrice" -> khttp.get("http://localhost:8080/getbeerbyprice/$price").text
            "updateBeer" -> khttp.put("http://localhost:8080/updatebeer", data = mapOf("id" to beer?.beerID.toString(), "name" to beer?.beerName, "price" to beer?.beerPrice.toString()))
            "deleteBeer" -> khttp.delete("http://localhost:8080/deletebeer/$name")
            else -> null
        }
        println("result: ")
        println(result)
        if (result != null) sendMessage(result.toString())
    }

    fun sendMessage(msg: String) {
        println("message: ")
        println(msg)
        this.amqpTemplate.convertAndSend(rabbitMqComponent.getExchange(), rabbitMqComponent.getRoutingKey(), msg)
    }

}

import com.sd.laborator.interfaces.BeerDAO
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.*

@Controller
class BeerDeleteMicroservice {
    @Autowired
    private lateinit var beerDAO: BeerDAO

    @RequestMapping(value = ["/deletebeermicroservice/{name}"], method = [RequestMethod.DELETE])
    @ResponseBody
    fun deleteBeer(@PathVariable name: String){
        beerDAO.deleteBeer(name)
    }
}

import com.sd.laborator.interfaces.BeerDAO
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.*

@Controller
class BeerGetMicroservice {
    @Autowired
    private lateinit var beerDAO: BeerDAO

    @RequestMapping(value = ["/getbeerbynamemicroservice/{name}"], method = [RequestMethod.GET])
    @ResponseBody
    fun getBeerByName(@PathVariable name: String): String {
        return beerDAO.getBeerByName(name)!!
    }

    @RequestMapping(value = ["/getbeerbypricemicroservice/{price}"], method = [RequestMethod.GET])
    @ResponseBody
    fun getBeerByPrice(@PathVariable price: Float): String {
        return beerDAO.getBeerByPrice(price)!!
    }

    @RequestMapping(value = ["/getbeersmicroservice"], method = [RequestMethod.GET])
    @ResponseBody
    fun getBeers(): String {
        return beerDAO.getBeers()
    }
}
import com.sd.laborator.interfaces.BeerDAO
import com.sd.laborator.model.Beer
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.*

@Controller
class BeerUpdateMicroservice {
    @Autowired
    private lateinit var beerDAO: BeerDAO

    @RequestMapping(value = ["/updatebeermicroservice"], method = [RequestMethod.PUT])
    @ResponseBody
    fun updateBeer(@RequestParam beer: Map<String, String>) {
        beerDAO.updateBeer(
            Beer(
                id = beer["id"]?.toInt()!!,
                name = beer["name"].toString(),
                price = beer["price"]?.toFloat()!!
            )
        )
    }
}



model

class Beer(private var id: Int, private var name: String, private var price: Float) {

    var beerID: Int
        get() {
            return id
        }
        set(value) {
            id = value
        }
    var beerName: String
        get() {
            return name
        }
        set(value) {
            name = value
        }
    var beerPrice: Float
        get() {
            return price
        }
        set(value) {
            price = value
        }

    override fun toString(): String {
        return "Beer [id=$beerID, name=$beerName, price=$beerPrice]"
    }
}


service


package com.sd.laborator.services

import com.sd.laborator.interfaces.BeerDAO
import com.sd.laborator.model.Beer
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.jdbc.core.JdbcTemplate
import org.springframework.jdbc.core.RowMapper
import org.springframework.stereotype.Service
import java.sql.ResultSet
import java.sql.SQLException
import java.util.regex.Pattern

class BeerRowMapper : RowMapper<Beer?> {
    @Throws(SQLException::class)
    override fun mapRow(rs: ResultSet, rowNum: Int): Beer {
        return Beer(rs.getInt("id"), rs.getString("name"), rs.getFloat("price"))
    }
}

@Service
class BeerDAOService: BeerDAO {
    //Spring Boot will automatically wire this object using application.properties:
    @Autowired
    private lateinit var jdbcTemplate: JdbcTemplate
    var pattern: Pattern = Pattern.compile("\\W")

    override fun createBeerTable() {
        jdbcTemplate.execute("""CREATE TABLE IF NOT EXISTS beers(
                                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                                        name VARCHAR(100) UNIQUE,
                                        price FLOAT)""")
    }

    override fun addBeer(beer: Beer) {
        if(pattern.matcher(beer.beerName).find()) {
            println("SQL Injection for beer name")
            return
        }
        jdbcTemplate.update("INSERT INTO beers(name, price) VALUES (?, ?)", beer.beerName, beer.beerPrice)
    }

    override fun getBeers(): String {
        val result: MutableList<Beer?> = jdbcTemplate.query("SELECT * FROM beers", BeerRowMapper())
        var stringResult: String = ""
        for (item in result) {
            stringResult += item
        }
        return stringResult
    }

    override fun getBeerByName(name: String): String? {
        if(pattern.matcher(name).find()) {
            println("SQL Injection for beer name")
            return null
        }
        val result: Beer? = jdbcTemplate.queryForObject("SELECT * FROM beers WHERE name = '$name'", BeerRowMapper())
        return result.toString()
    }

    override fun getBeerByPrice(price: Float): String {
        val result: MutableList<Beer?> = jdbcTemplate.query("SELECT * FROM beers WHERE price <= $price", BeerRowMapper())
        var stringResult: String = ""
        for (item in result) {
            stringResult += item
        }
        return stringResult
    }

    override fun updateBeer(beer: Beer) {
        if(pattern.matcher(beer.beerName).find()) {
            println("SQL Injection for beer name")
            return
        }
        jdbcTemplate.update("UPDATE beers SET name = ?, price = ? WHERE id = ?", beer.beerName, beer.beerPrice, beer.beerID)
    }

    override fun deleteBeer(name: String) {
        if(pattern.matcher(name).find()) {
            println("SQL Injection for beer name")
            return
        }
        jdbcTemplate.update("DELETE FROM beers WHERE name = ?", name)
    }
}



main in kt

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication

@SpringBootApplication
open class SQLiteExample

fun main(args: Array<String>) {
    runApplication<SQLiteExample>(*args)
}



cli py


import pika
from retry import retry


class RabbitMq:
    config = {
        'host': '0.0.0.0',
        'port': 5678,
        'username': 'student',
        'password': 'student',
        'exchange': 'sqliteexample.direct',
        'routing_key': 'sqliteexample.routingkey1',
        'queue': 'sqliteexample.queue'
    }
    credentials = pika.PlainCredentials(config['username'], config['password'])
    parameters = (pika.ConnectionParameters(host=config['host']),
                  pika.ConnectionParameters(port=config['port']),
                  pika.ConnectionParameters(credentials=credentials))

    def on_received_message(self, blocking_channel, deliver, properties,
                            message):
        result = message.decode('utf-8')
        blocking_channel.confirm_delivery()
        try:
            print(result)
        except Exception:
            print("wrong data format")
        finally:
            blocking_channel.stop_consuming()

    @retry(pika.exceptions.AMQPConnectionError, delay=5, jitter=(1, 3))
    def receive_message(self):
        # automatically close the connection
        with pika.BlockingConnection(self.parameters) as connection:
            # automatically close the channel
            with connection.channel() as channel:
                channel.basic_consume(self.config['queue'],
                                      self.on_received_message)
                try:
                    channel.start_consuming()
                # Don't recover connections closed by server
                except pika.exceptions.ConnectionClosedByBroker:
                    print("Connection closed by broker.")
                # Don't recover on channel errors
                except pika.exceptions.AMQPChannelError:
                    print("AMQP Channel Error")
                # Don't recover from KeyboardInterrupt
                except KeyboardInterrupt:
                    print("Application closed.")

    def send_message(self, message):
        # automatically close the connection
        with pika.BlockingConnection(self.parameters) as connection:
            # automatically close the channel
            with connection.channel() as channel:
                self.clear_queue(channel)
                channel.basic_publish(exchange=self.config['exchange'],
                                      routing_key=self.config['routing_key'],
                                      body=message)

    def clear_queue(self, channel):
        channel.queue_purge(self.config['queue'])


def print_menu():
    print('0 --> Exit program')
    print('1 --> addBeer')
    print('2 --> getBeers')
    print('3 --> getBeerByName')
    print('4 --> getBeerByPrice')
    print('5 --> updateBeer')
    print('6 --> deleteBeer')
    return input("Option=")


if __name__ == '__main__':
    rabbit_mq = RabbitMq()
    rabbit_mq.send_message("createBeerTable~")
    while True:
        option = print_menu()
        if option == '0':
            break
        elif option == '1':
            name = input("Beer name: ")
            price = float(input("Beer price: "))
            rabbit_mq.send_message("addBeer~id=-1;name={};price={}".format(name, price))
        elif option == '2':
            rabbit_mq.send_message("getBeers~")
            rabbit_mq.receive_message()
        elif option == '3':
            name = input("Beer name: ")
            rabbit_mq.send_message("getBeerByName~name={}".format(name))
            rabbit_mq.receive_message()
        elif option == '4':
            price = float(input("Beer price: "))
            rabbit_mq.send_message("getBeerByPrice~price={}".format(price))
            rabbit_mq.receive_message()
        elif option == '5':
            id = int(input("Beer ID: "))
            name = input("Beer name: ")
            price = float(input("Beer price: "))
            rabbit_mq.send_message("updateBeer~id={};name={};price={}".format(id, name, price))
            rabbit_mq.receive_message()
        elif option == '6':
            name = input("Beer name: ")
            rabbit_mq.send_message("deleteBeer~name={}".format(name))
        else:
            print("Invalid option")
