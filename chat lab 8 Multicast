FilterMessageMicroservice

package com.sd.laborator

import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import java.io.BufferedReader
import java.io.InputStreamReader
import java.net.*
import kotlin.concurrent.thread
import kotlin.system.exitProcess

class FilterMessageMicroservice {
    private lateinit var messageManagerSocket: Socket
    private lateinit var filterManagerSocket: ServerSocket

    companion object Constants {
        // pentru testare, se foloseste localhost. pentru deploy, server-ul socket (microserviciul MessageManager) se identifica dupa un "hostname"
        // acest hostname poate fi trimis (optional) ca variabila de mediu
        val MESSAGE_MANAGER_HOST = System.getenv("MESSAGE_MANAGER_HOST") ?: "localhost"

        const val MESSAGE_MANAGER_PORT = 1500
        const val FILTER_PORT = 1700
    }

    private fun subscribeToMessageManager() {
        try {
            messageManagerSocket = Socket(MESSAGE_MANAGER_HOST, MESSAGE_MANAGER_PORT)
            println("M-am conectat la MessageManager!")
        } catch (e: Exception) {
            println("Nu ma pot conecta la MessageManager!")
            exitProcess(1)
        }
    }

    private fun handleClient(clientConnection:Socket){
        val clientBufferReader = BufferedReader(InputStreamReader(clientConnection.inputStream))
        while(true) {
            // se citeste intrebarea dorita
            val receivedQuestion = clientBufferReader.readLine()

            if( receivedQuestion.isEmpty() ){
                println("Clientul ${clientConnection.port} s-a deconectat!")
                break
            }

            println("S-a primit o cerere de la: ${clientConnection.inetAddress.hostAddress}:${clientConnection.port}")

            // modific tipul intrebarii
            // broadcast intrebare -> trimte la toti
            // selected#numar intrebare -> trimite la primii numar studenti

            val messageType = receivedQuestion.split(" ")[0]

            // bufferul message manager
            val messageManagerBufferReader =
                BufferedReader(InputStreamReader(messageManagerSocket.inputStream))

            if (messageType.startsWith("studenti")) {

                // intrebare pentru studenti selectati
                // voi afla lista de studenti existenta si voi selecta n aleator
                // intrebarea este redirectionata catre microserviciul MessageManager
                println("Trimit catre MessageManager: ${"studenti ${filterManagerSocket.localPort} none\n"}")
                messageManagerSocket.getOutputStream()
                    .write(("studenti ${filterManagerSocket.localPort} none\n").toByteArray())

                // astept lista de studenti
                val receivedResponse = messageManagerBufferReader.readLine()
                // se trimite raspunsul inapoi clientului apelant
                println("Am primit lista: \"$receivedResponse\"")

                // Trimit lista spre Teacher
                clientConnection.getOutputStream()
                    .write((receivedResponse + "\n").toByteArray())
            }
        }
    }

    fun run(){
        // microserviciul se inscrie in lista de "subscribers" de la MessageManager prin conectarea la acesta
        subscribeToMessageManager()
        filterManagerSocket = ServerSocket(FILTER_PORT)

        println("FilterMicroservice se executa pe portul: ${filterManagerSocket.localPort}")
        println("Se asteapta cereri (studenti)...")

        while (true) {
            // se asteapta conexiuni din partea clientilor ce doresc sa puna o intrebare
            // (in acest caz, din partea aplicatiei client GUI)
            val clientConnection = filterManagerSocket.accept()
            println("Subscriber connected: ${clientConnection.port}")
            thread {
                handleClient(clientConnection)
            }
        }
    }
}

fun main(args: Array<String>) {
    val filterMessageMicroservice = FilterMessageMicroservice()
    filterMessageMicroservice.run()
}```



MessageManagerMicroservice

package com.sd.laborator

import java.io.BufferedReader
import java.io.InputStreamReader
import java.lang.Exception
import java.lang.StringBuilder
import java.net.ServerSocket
import java.net.Socket
import kotlin.concurrent.thread

class MessageManagerMicroservice {
    private val subscribers: HashMap<Int, Socket>
    private val students: MutableList<Int>
    private lateinit var messageManagerSocket: ServerSocket

    companion object Constants {
        const val MESSAGE_MANAGER_PORT = 1500
        const val FILTER_PORT = 1700
    }

    init {
        subscribers = hashMapOf()
        students = mutableListOf()
    }

    private fun broadcastMessage(message: String, except: Int) {
        subscribers.forEach {
            it.takeIf { it.key != except && it.key in students}
                ?.value?.getOutputStream()?.write((message + "\n").toByteArray())
        }
    }

    // ############## MODIFICARE PENTRU A GESTIONA O INTREBARE PT GRUP SELECT DE STUDENTI ##########
    private fun broadcastSelectiveMessage(source:Int, destinations: String, messageBody: String) {
        val destinationPorts = destinations.split("/")
        for( destPort in destinationPorts ){
            if( !destPort.isEmpty() ){
                try{
                    val port = destPort.toInt()
                    if( port in students ){
                        // create intrebare message from student
                        val message = "intrebare ${source} $messageBody"
                        subscribers[port]?.getOutputStream()?.write((message+"\n").toByteArray())
                    }
                }
                catch (ex:Exception){
                    continue
                }
            }
        }
    }

    private fun respondTo(destination: Int, message: String) {
        subscribers[destination]?.getOutputStream()?.write((message + "\n").toByteArray())
    }


    // formatul o sa fie:
    // port1/port2/port3/
    private fun getStudentList(destination: Int) {
        var studentList = StringBuilder()
        students.forEach{
            studentList.append("$it/")
        }
        val message = studentList.toString()
        println("Generated the list: $message")
        subscribers[destination]?.getOutputStream()?.write((message + "\n").toByteArray())
        println("Sent the list to $destination")
    }

    private fun handleClient(clientConnection: Socket){
        println("Subscriber conectat: ${clientConnection.inetAddress.hostAddress}:${clientConnection.port}")

        // adaugarea in lista de subscriberi trebuie sa fie atomica!
        synchronized(subscribers) {
            subscribers[clientConnection.port] = clientConnection
            val subs = subscribers.map { it -> it.value.port.toString() }.reduce{
                acc, s->
                acc + "$s "
            }
            println("Current subscribers: $subs")
        }

        val bufferReader = BufferedReader(InputStreamReader(clientConnection.inputStream))

        while (true) {
            // se citeste raspunsul de pe socketul TCP
            val receivedMessage = bufferReader.readLine()

            // daca se primeste un mesaj gol (NULL), atunci inseamna ca cealalta parte a socket-ului a fost inchisa
            if (receivedMessage == null) {
                // deci subscriber-ul respectiv a fost deconectat
                println("Subscriber-ul ${clientConnection.port} a fost deconectat.")

                synchronized(subscribers) {
                    subscribers.remove(clientConnection.port)
                }

                synchronized(students) {
                    if (clientConnection.port in students) {
                        students.remove(clientConnection.port)
                    }
                }
                bufferReader.close()
                clientConnection.close()
                break
            }

            println("Primit mesaj: $receivedMessage")
            val (messageType, messageDestination, messageBody) = receivedMessage.split(" ", limit = 3)

            when (messageType) {
                "intrebare" -> {
                    // tipul mesajului de tip intrebare este de forma:
                    // intrebare <DESTINATIE_RASPUNS> <CONTINUT_INTREBARE>

                    broadcastMessage(
                        "intrebare ${clientConnection.port} $messageBody",
                        except = clientConnection.port
                    )
                }
                "raspuns" -> {
                    // tipul mesajului de tip raspuns este de forma:
                    // raspuns <CONTINUT_RASPUNS>
                    respondTo(messageDestination.toInt(), messageBody)
                }
                "identitate" -> {
                    if(messageBody == "student"){
                        // verific daca portul nu este deja in lista de studenti

                        synchronized(students) {
                            if (!students.contains(clientConnection.port)) {
                                students.add(clientConnection.port)
                            }
                        }
                    }
                }
                "studenti" -> {
                    // profesorul a trimis pentru a primi lista de studenti din clasa
                    // create string to send
                    getStudentList(clientConnection.port)
                }

                // a se adauga posibilitatea de intrebare subgrup studenti
                "broadcast" -> {
                    // va fi trimis de profesor cand doreste sa trimita doar unui grup
                    // broadcast port1/port2/port3/message intrebare
                    broadcastSelectiveMessage(clientConnection.port, messageDestination, messageBody)
                }
            }
        }
    }

    public fun run() {
        // se porneste un socket server TCP pe portul 1500 care asculta pentru conexiuni
        messageManagerSocket = ServerSocket(MESSAGE_MANAGER_PORT)
        println("MessageManagerMicroservice se executa pe portul: ${messageManagerSocket.localPort}")
        println("Se asteapta conexiuni si mesaje...")

        while (true) {
            // se asteapta conexiuni din partea clientilor subscriberi
            val clientConnection = messageManagerSocket.accept()

            println("${clientConnection.port} connected before GlobalLaunch.")

            // se porneste un thread separat pentru tratarea conexiunii cu clientul

            // vom utiliza Coroutina pentru asta
            // este necesar si un run blocking pentru a executa pt ca ai in interior
            // metode blocante cum ar fi IO si altele
            // facem cruce mare

            // Asta e tot ce e leget de coroutine <3
            thread {
                handleClient(clientConnection)
            }
        }
    }
}

fun main(args: Array<String>) {
    val messageManagerMicroservice = MessageManagerMicroservice()
    messageManagerMicroservice.run()
}




StudentMicroservice

package com.sd.laborator

import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import java.io.BufferedReader
import java.io.File
import java.io.InputStreamReader
import java.lang.Exception
import java.net.Socket
import kotlin.concurrent.thread
import kotlin.system.exitProcess

class StudentMicroservice {
    // intrebarile si raspunsurile sunt mentinute intr-o lista de perechi de forma:
    // [<INTREBARE 1, RASPUNS 1>, <INTREBARE 2, RASPUNS 2>, ... ]
    private var questionDatabase: MutableList<Pair<String, String>>
    private lateinit var messageManagerSocket: Socket

    init {
        val databaseLines: List<String> = File("/home/vlad/Facultate/SistemeDistribuite/BelireaSD/Lab8Chat/cod exemplu/problema 2/StudentMicroservice/questions_database.txt").readLines()
        questionDatabase = mutableListOf()

        /*
         "baza de date" cu intrebari si raspunsuri este de forma:

         <INTREBARE_1>\n
         <RASPUNS_INTREBARE_1>\n
         <INTREBARE_2>\n
         <RASPUNS_INTREBARE_2>\n
         ...
         */
        for (i in 0..(databaseLines.size - 1) step 2) {
            questionDatabase.add(Pair(databaseLines[i], databaseLines[i + 1]))
        }
    }

    companion object Constants {
        // pentru testare, se foloseste localhost. pentru deploy, server-ul socket (microserviciul MessageManager) se identifica dupa un "hostname"
        // acest hostname poate fi trimis (optional) ca variabila de mediu
        val MESSAGE_MANAGER_HOST = System.getenv("MESSAGE_MANAGER_HOST") ?: "localhost"
        const val MESSAGE_MANAGER_PORT = 1500
    }

    private fun subscribeToMessageManager() {
        try {
            messageManagerSocket = Socket(MESSAGE_MANAGER_HOST, MESSAGE_MANAGER_PORT)
            println("M-am conectat la MessageManager!")

            // voi trimite un mesaj cu identitatea mea ca student
            messageManagerSocket.getOutputStream().write("identitate ${MESSAGE_MANAGER_PORT} student\n".toByteArray())

        } catch (e: Exception) {
            println("Nu ma pot conecta la MessageManager!")
            exitProcess(1)
        }
    }

    private fun respondToQuestion(question: String): String? {
        questionDatabase.forEach {
            // daca se gaseste raspunsul la intrebare, acesta este returnat apelantului
            if (it.first == question) {
                return it.second
            }
        }
        return null
    }

    public fun run() {
        // microserviciul se inscrie in lista de "subscribers" de la MessageManager prin conectarea la acesta
        subscribeToMessageManager()

        println("StudentMicroservice se executa pe portul: ${messageManagerSocket.localPort}")
        println("Se asteapta mesaje...")

        val bufferReader = BufferedReader(InputStreamReader(messageManagerSocket.inputStream))

        while (true) {
            // se asteapta intrebari trimise prin intermediarul "MessageManager"
            val response = bufferReader.readLine()

            if (response == null) {
                // daca se primeste un mesaj gol (NULL), atunci inseamna ca cealalta parte a socket-ului a fost inchisa
                println("Microserviciul MessageService (${messageManagerSocket.port}) a fost oprit.")
                bufferReader.close()
                messageManagerSocket.close()
                break
            }

            thread {
                val (messageType, messageDestination, messageBody) = response.split(" ", limit = 3)

                when (messageType) {
                    // tipul mesajului cunoscut de acest microserviciu este de forma:
                    // intrebare <DESTINATIE_RASPUNS> <CONTINUT_INTREBARE>
                    "intrebare" -> {
                        println("Am primit o intrebare de la $messageDestination: \"${messageBody}\"")
                        var responseToQuestion = respondToQuestion(messageBody)
                        responseToQuestion?.let {
                            responseToQuestion = "raspuns $messageDestination $it"
                            println("Trimit raspunsul: \"${response}\"")
                            messageManagerSocket.getOutputStream().write((responseToQuestion + "\n").toByteArray())
                        }
                    }
                }
            }

        }
    }
}

fun main(args: Array<String>) {
    val studentMicroservice = StudentMicroservice()
    studentMicroservice.run()
}




package com.sd.laborator

import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import java.io.BufferedReader
import java.io.InputStreamReader
import java.net.*
import kotlin.concurrent.thread
import kotlin.system.exitProcess

class TeacherMicroservice {
    private lateinit var messageManagerSocket: Socket
    private lateinit var filterSocket: Socket
    private lateinit var teacherMicroserviceServerSocket: ServerSocket

    companion object Constants {
        // pentru testare, se foloseste localhost. pentru deploy, server-ul socket (microserviciul MessageManager) se identifica dupa un "hostname"
        // acest hostname poate fi trimis (optional) ca variabila de mediu
        val MESSAGE_MANAGER_HOST = System.getenv("MESSAGE_MANAGER_HOST") ?: "localhost"
        val FILTER_HOST = System.getenv("FILTER_HOST") ?: "localhost"
        const val FILTER_PORT = 1700
        const val MESSAGE_MANAGER_PORT = 1500
        const val TEACHER_PORT = 1600
    }

    private fun subscribeToMessageManager() {
        try {
            messageManagerSocket = Socket(MESSAGE_MANAGER_HOST, MESSAGE_MANAGER_PORT)
            messageManagerSocket.soTimeout = 3000
            println("M-am conectat la MessageManager!")
        } catch (e: Exception) {
            println("Nu ma pot conecta la MessageManager!")
            exitProcess(1)
        }
    }

    private fun subscribeToFilter(){
        try {
            filterSocket = Socket(FILTER_HOST, FILTER_PORT)
            println("M-am conectat la Filter!")
        } catch (e: Exception) {
            println("Nu ma pot conecta la Filter!")
            exitProcess(1)
        }
    }

    public fun run() {
        // microserviciul se inscrie in lista de "subscribers" de la MessageManager prin conectarea la acesta
        subscribeToMessageManager()
        subscribeToFilter()

        // se porneste un socket server TCP pe portul 1600 care asculta pentru conexiuni
        teacherMicroserviceServerSocket = ServerSocket(TEACHER_PORT)

        println("TeacherMicroservice se executa pe portul: ${teacherMicroserviceServerSocket.localPort}")
        println("Se asteapta cereri (intrebari)...")

        while (true) {
            // se asteapta conexiuni din partea clientilor ce doresc sa puna o intrebare
            // (in acest caz, din partea aplicatiei client GUI)
            val clientConnection = teacherMicroserviceServerSocket.accept()
            thread {

                println("S-a primit o cerere de la: ${clientConnection.inetAddress.hostAddress}:${clientConnection.port}")

                // se citeste intrebarea dorita
                val clientBufferReader = BufferedReader(InputStreamReader(clientConnection.inputStream))
                val receivedQuestion = clientBufferReader.readLine()

                // modific tipul intrebarii
                // broadcast intrebare -> trimte la toti
                // selected#numar intrebare -> trimite la primii numar studenti

                val messageType = receivedQuestion.split(" ")[0]
                val messageContent = receivedQuestion.subSequence(messageType.length + 1, receivedQuestion.length)

                // bufferul message manager
                val messageManagerBufferReader = BufferedReader(InputStreamReader(messageManagerSocket.inputStream))
                val filterBufferedReader = BufferedReader(InputStreamReader(filterSocket.inputStream))

                if (messageType.startsWith("broadcast")) {
                    // intrebarea este redirectionata catre microserviciul MessageManager
                    println("Trimit catre MessageManager: ${"intrebare ${messageManagerSocket.localPort} $messageContent\n"}")
                    messageManagerSocket.getOutputStream()
                        .write(("intrebare ${messageManagerSocket.localPort} $messageContent\n").toByteArray())
                } else {
                    if (messageType.startsWith("selected")) {

                        // trimit o cerere de numarul de student de la filter

                        println("Trimit catre Filter: ${"studenti ${messageManagerSocket.localPort} none\n"}")
                        filterSocket.getOutputStream()
                            .write(("studenti ${messageManagerSocket.localPort} none\n").toByteArray())

                        // astept lista de studenti
                        val receivedResponse = filterBufferedReader.readLine()
                        // se trimite raspunsul inapoi clientului apelant
                        println("Am primit lista: \"$receivedResponse\"")

                        // parsez lista
                        val studentList = receivedResponse.split("/")
                            .filter { it -> !it.isEmpty() }
                            .map { it -> it.toInt() }

                        // voi selecta un nr de studenti studenti
                        val number = messageType.split("#")[1].toInt()

                        if (studentList.size <= number) {
                            // simple broadcast
                            // intrebarea este redirectionata catre microserviciul MessageManager
                            println("Trimit catre MessageManager: ${"intrebare ${messageManagerSocket.localPort} $messageContent\n"}")
                            messageManagerSocket.getOutputStream()
                                .write(("intrebare ${messageManagerSocket.localPort} $messageContent\n").toByteArray())
                        } else {
                            // select 2 random students
                            val selected = studentList.shuffled().subList(0, number + 1)
                            val messageString = selected.map { it -> it.toString() }
                                .reduce { acc, it ->
                                    "$it/"
                                }
                            // selected broadcast
                            // intrebarea este redirectionata catre microserviciul MessageManager
                            println("Trimit catre MessageManager: ${"broadcast ${messageString} $messageContent\n"}")
                            messageManagerSocket.getOutputStream()
                                .write(("broadcast ${messageString} $messageContent\n").toByteArray())
                        }
                    } else {
                        // continut eronat
                    }
                }

                // se asteapta raspuns de la MessageManager
                try {
                    val receivedResponse = messageManagerBufferReader.readLine()

                    // se trimite raspunsul inapoi clientului apelant
                    println("Am primit raspunsul: \"$receivedResponse\"")
                    clientConnection.getOutputStream().write((receivedResponse + "\n").toByteArray())
                } catch (e: SocketTimeoutException) {
                    println("Nu a venit niciun raspuns in timp util.")
                    clientConnection.getOutputStream().write("Nu a raspuns nimeni la intrebare\n".toByteArray())
                } finally {
                    // se inchide conexiunea cu clientul
                    clientConnection.close()
                }

            }
        }
    }
}

fun main(args: Array<String>) {
    val teacherMicroservice = TeacherMicroservice()
    teacherMicroservice.run()
}





from tkinter import *
from tkinter import ttk
import threading
import socket

HOST = "localhost"
TEACHER_PORT = 1600


def resolve_question(question_text, number=-1):
    # creare socket TCP
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # incercare de conectare catre microserviciul Teacher
    try:
        sock.connect((HOST, TEACHER_PORT))
        # ############## MODIFICARE PENTRU TRIMITERE BROADCAST SELECTIV ############
        if number == -1:
            # transmitere intrebare - se deleaga intrebarea catre microserviciu
            sock.send(bytes("broadcast " + question_text + "\n", "utf-8"))

        else:
            # transmitere intrebare - se deleaga intrebarea catre microserviciu
            sock.send(bytes("selected#" + str(number) + " " + question_text + "\n", "utf-8"))
        # ############ SFARSIT MODIFICARE #############

        # primire raspuns -> microserviciul Teacher foloseste coregrafia de microservicii pentru a trimite raspunsul inapoi
        response_text = str(sock.recv(1024), "utf-8")

    except ConnectionError:
        # in cazul unei erori de conexiune, se afiseaza un mesaj
        response_text = "Eroare de conectare la microserviciul Teacher!"

    # se adauga raspunsul primit in caseta text din interfata grafica
    response_widget.insert(END, response_text)


def ask_question():
    # preluare text intrebare de pe interfata grafica
    question_text = question.get()

    # pornire thread separat pentru tratarea intrebarii respective
    # astfel, nu se blocheaza interfata grafica!
    threading.Thread(target=resolve_question, args=(question_text,)).start()


def ask_question_selected():
    # preluare text intrebare de pe interfata grafica
    question_text = question.get()

    # pornire thread separat pentru tratarea intrebarii respective
    # astfel, nu se blocheaza interfata grafica!
    threading.Thread(target=resolve_question, args=(question_text, 2,)).start()

if __name__ == '__main__':
    # elementul radacina al interfetei grafice
    root = Tk()
    root.title("Interactiune profesor-studenti")

    # la redimensionarea ferestrei, cadrele se extind pentru a prelua spatiul ramas
    root.columnconfigure(0, weight=1)
    root.rowconfigure(0, weight=1)

    # cadrul care incapsuleaza intregul continut
    content = ttk.Frame(root)

    # caseta text care afiseaza raspunsurile la intrebari
    response_widget = Text(content, height=10, width=50)

    # eticheta text din partea dreapta
    question_label = ttk.Label(content, text="Profesorul intreaba:")

    # caseta de introducere text cu care se preia intrebarea de la utilizator
    question = ttk.Entry(content, width=50)

    # butoanele din dreapta-jos
    ask = ttk.Button(content, text="Intreaba", command=ask_question)  # la apasare, se apeleaza functia ask_question
    askSelected = ttk.Button(content, text="Intreaba aleator 2 studenti", command=ask_question_selected)  # la apasare, se apeleaza functia ask_question
    exitbtn = ttk.Button(content, text="Iesi", command=root.destroy)  # la apasare, se iese din aplicatie

    # plasarea elementelor in layout-ul de tip grid
    content.grid(column=0, row=0)
    response_widget.grid(column=0, row=0, columnspan=3, rowspan=4)
    question_label.grid(column=3, row=0, columnspan=3)
    question.grid(column=3, row=1, columnspan=3)
    ask.grid(column=3, row=3)
    askSelected.grid(column=4, row=3)
    exitbtn.grid(column=5, row=3)

    # bucla principala a interfetei grafice care asteapta evenimente de la utilizator
    root.mainloop()

TeacherStudentGUI



TeacherMicroservice


