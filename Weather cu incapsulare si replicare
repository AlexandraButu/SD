controllers

import com.sd.laborator.interfaces.OrchestratorServiceInterface
import com.sd.laborator.interfaces.ReplicationServiceInterface
import com.sd.laborator.interfaces.WeatherAppVisualisationInterface
import com.sd.laborator.pojo.WeatherForecastData
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import org.springframework.web.bind.annotation.ResponseBody
import java.net.URL

@Controller
class ApiForecastController {

    // iar aici putem folosi serviciul pe care l am facut
    @Autowired
    private lateinit var weatherAppVisualisationService: WeatherAppVisualisationInterface

    // Asta se cheama mangleala
    // Cand sari peste pasi si asumi ca sunt facuti corect doar ca sa nu pierzi timp
    @Autowired
    private lateinit var replicationService: ReplicationServiceInterface

    @RequestMapping("/vremea/{location}", method = [RequestMethod.GET])
    @ResponseBody
    fun getForecast(@PathVariable location: String): String {

        // We replicate the service with ease
        replicationService.replicateService(3)

        return weatherAppVisualisationService.getForecastData(location)
    }

}

import com.sd.laborator.interfaces.OrchestratorServiceInterface
import com.sd.laborator.pojo.WeatherForecastData
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import org.springframework.web.bind.annotation.ResponseBody

@Controller
class WeatherAppController {
    @Autowired
    private lateinit var orchestratorService: OrchestratorServiceInterface

    @RequestMapping("/getforecast/{location}", method = [RequestMethod.GET])
    @ResponseBody
    fun getForecast(@PathVariable location: String): String {
        // se incearca preluarea WOEID-ului locaţiei primite in URL
        // pe baza ID-ului de locaţie, se interoghează al doilea serviciu care returnează datele meteo
        // încapsulate într-un obiect POJO
        val rawForecastData: WeatherForecastData = orchestratorService.getForecastData(location)

        // fiind obiect POJO, funcţia toString() este suprascrisă pentru o afişare mai prietenoasă
        return rawForecastData.toString()
    }

}



interfaces

interface LocationSearchInterface {
    fun getLocationId(locationName: String): Int
}

interface OrchestratorServiceInterface {
    fun getForecastData(locationName: String): WeatherForecastData
}
interface ReplicationServiceInterface {
    fun replicateService(replications: Int)
}
interface WeatherAppVisualisationInterface {
    fun getForecastData(locationName: String): String
}
interface WeatherForecastInterface {
    fun getForecastData(locationId: Int): WeatherForecastData
}



pojo

data class WeatherForecastData (
    var location: String,
    var date: String?,
    var weatherState: String?,
    var weatherStateIconURL: String?,
    var windDirection: String?,
    var windSpeed: Int?, // km/h
    var minTemp: Int?, // grade celsius
    var maxTemp: Int?,
    var currentTemp: Int?,
    var humidity: Int? // procent
)



services

import com.sd.laborator.interfaces.LocationSearchInterface
import org.springframework.stereotype.Service
import java.net.URL
import org.json.JSONObject
import java.net.URLEncoder
import java.nio.charset.StandardCharsets

@Service
class LocationSearchService : LocationSearchInterface {
    override fun getLocationId(locationName: String): Int {
        // codificare parametru URL (deoarece poate conţine caractere speciale)
        val encodedLocationName = URLEncoder.encode(locationName, StandardCharsets.UTF_8.toString())

        // construire obiect de tip URL
        val locationSearchURL = URL("https://www.metaweather.com/api/location/search/?query=$encodedLocationName")

        // preluare raspuns HTTP (se face cerere GET şi se preia conţinutul răspunsului sub formă de text)
        val rawResponse: String = locationSearchURL.readText()

        // parsare obiect JSON
        val responseRootObject = JSONObject("{\"data\": ${rawResponse}}")
        val responseContentObject = responseRootObject.getJSONArray("data").takeUnless { it.isEmpty }
            ?.getJSONObject(0)
        return responseContentObject?.getInt("woeid") ?: -1
    }
}

import com.sd.laborator.interfaces.OrchestratorServiceInterface
import com.sd.laborator.pojo.WeatherForecastData
import org.springframework.stereotype.Service

@Service
class OrchestratorService(private val weatherForecastService: WeatherForecastService,
                          private val locationSearchService: LocationSearchService,
                          private val timeService: TimeService) : OrchestratorServiceInterface {

    override fun getForecastData(locationName: String): WeatherForecastData {
        val locationId = locationSearchService.getLocationId(locationName)

        // dacă locaţia nu a fost găsită, răspunsul va fi corespunzător
        if (locationId == -1) {
            return WeatherForecastData(
                locationName,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null,
                null
            )
        }

        // pe baza ID-ului de locaţie, se interoghează al doilea serviciu care returnează datele meteo
        // încapsulate într-un obiect POJO
        val rawForecastData: WeatherForecastData = weatherForecastService.getForecastData(locationId)

        // Actualizez data
        rawForecastData.date = timeService.getCurrentTime()

        return rawForecastData
    }
}

import com.sd.laborator.interfaces.ReplicationServiceInterface
import org.springframework.stereotype.Service

@Service
class ReplicationService : ReplicationServiceInterface{
    override fun replicateService(replications: Int) {
        // do magic :O
    }
}

import org.springframework.stereotype.Service
import java.text.SimpleDateFormat
import java.util.*

@Service
class TimeService {
    fun getCurrentTime():String {
        val formatter =  SimpleDateFormat("dd/MM/yyyy HH:mm:ss")
        return formatter.format(Date())
    }
}

import com.sd.laborator.interfaces.WeatherAppVisualisationInterface
import org.springframework.stereotype.Service
import java.net.URL

// deci serviciul asta incapsuleaza interfata
@Service
class WeatherAppVisualisationService : WeatherAppVisualisationInterface{
    override fun getForecastData(locationName: String): String {
        val vremeaDataURL = URL("http://localhost:8080/getforecast/${locationName}")
        return vremeaDataURL.readText()
    }
}

import com.sd.laborator.interfaces.WeatherForecastInterface
import com.sd.laborator.pojo.WeatherForecastData
import org.json.JSONObject
import org.springframework.stereotype.Service
import java.net.URL
import kotlin.math.roundToInt

@Service
class WeatherForecastService : WeatherForecastInterface {
    override fun getForecastData(locationId: Int): WeatherForecastData {
        // ID-ul locaţiei nu trebuie codificat, deoarece este numeric
        val forecastDataURL = URL("https://www.metaweather.com/api/location/$locationId/")

        // preluare conţinut răspuns HTTP la o cerere GET către URL-ul de mai sus
        val rawResponse: String = forecastDataURL.readText()

        // parsare obiect JSON primit
        val responseRootObject = JSONObject(rawResponse)
        val weatherDataObject = responseRootObject.getJSONArray("consolidated_weather").getJSONObject(0)

        // construire şi returnare obiect POJO care încapsulează datele meteo
        return WeatherForecastData(
            location = responseRootObject.getString("title"),
            date = null,
            weatherState = weatherDataObject.getString("weather_state_name"),
            weatherStateIconURL =
                "https://www.metaweather.com/static/img/weather/png/${weatherDataObject.getString("weather_state_abbr")}.png",
            windDirection = weatherDataObject.getString("wind_direction_compass"),
            windSpeed = weatherDataObject.getFloat("wind_speed").roundToInt(),
            minTemp = weatherDataObject.getFloat("min_temp").roundToInt(),
            maxTemp = weatherDataObject.getFloat("max_temp").roundToInt(),
            currentTemp = weatherDataObject.getFloat("the_temp").roundToInt(),
            humidity = weatherDataObject.getFloat("humidity").roundToInt()
        )
    }
}



WeatyherApp - main

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication

@SpringBootApplication
open class WeatherApp

fun main(args: Array<String>) {
    runApplication<WeatherApp>()
}
