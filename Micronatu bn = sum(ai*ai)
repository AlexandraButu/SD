Application

import io.micronaut.runtime.Micronaut

object Application {

    @JvmStatic
    fun main(args: Array<String>) {
        Micronaut.build()
                .packages("com.sd.laborator")
                .mainClass(Application.javaClass)
                .start()
    }
}


EvaluateSumFunction

import io.micronaut.function.FunctionBean
import io.micronaut.function.executor.FunctionInitializer
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import java.util.function.Supplier
import javax.inject.Inject

@FunctionBean("eratostene")
class EvaluateSumFunction : FunctionInitializer(), Supplier<SolutionResponse> {
    @Inject
    private lateinit var evaluateSumService: EvaluateSumService

    @Inject
    private lateinit var generateADTService: GenerateADTService

    private val LOG: Logger = LoggerFactory.getLogger(EvaluateSumFunction::class.java)

    override fun get(): SolutionResponse {
        val A = generateADTService.generateADT(100)
        val B = evaluateSumService.evaluateSum(A)

        val solutionResponse = SolutionResponse()
        solutionResponse.setList(B.toList())
        return solutionResponse
    }
}

/**
 * This main method allows running the function as a CLI application using: echo '{}' | java -jar function.jar 
 * where the argument to echo is the JSON to be parsed.
 */
fun main(args : Array<String>) { 
    val function = EvaluateSumFunction()
    function.run(args) { function.get() }
}




EvaluateSumService

import java.util.*
import javax.inject.Singleton

@Singleton
class EvaluateSumService {

    fun evaluateSum(list:List<Int>): List<Int>{
        val solution = mutableListOf<Int>()
        if(list.isNotEmpty()){
            // evaluate first element
            solution.add(list[0] * list[0])

            // evaluate all elements
            for(i in 1..list.size-1){
                solution.add(solution[i-1] + list[i]*list[i])
            }
        }

        return solution
    }

    init {
    }
}




GenerateADTService

import java.util.*
import javax.inject.Singleton
import kotlin.random.Random

@Singleton
class GenerateADTService {
    private val MAX_ELEM_SIZE = 100

    fun generateADT(sizeOfADT: Int): List<Int>{
        val solution = mutableListOf<Int>()

        for(i in 0..sizeOfADT){
            solution.add(Random.nextInt(MAX_ELEM_SIZE))
        }

        return solution
    }
}




SolutionResponse

import io.micronaut.core.annotation.Introspected

@Introspected
class SolutionResponse {
    private var list: List<Int>? = null

    fun getList(): List<Int>? {
        return list
    }

    fun setList(list: List<Int>?) {
        this.list = list
    }
}
