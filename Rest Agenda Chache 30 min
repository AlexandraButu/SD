controllers

import com.sd.laborator.interfaces.AgendaService
import com.sd.laborator.pojo.Person
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*

@RestController
class AgendaController {
    @Autowired
    private lateinit var agendaService: AgendaService

    @RequestMapping(value = ["/person"], method = [RequestMethod.POST])
    fun createPerson(@RequestBody person: Person): ResponseEntity<Unit> {
        agendaService.createPerson(person)
        return ResponseEntity(Unit, HttpStatus.CREATED)
    }

    @RequestMapping(value = ["/person/{id}"], method = [RequestMethod.GET])
    fun getPerson(@PathVariable id: Int): ResponseEntity<Person?> {
        val person: Person? = agendaService.getPerson(id)
        val status = if (person == null) {
            HttpStatus.NOT_FOUND
        } else {
            HttpStatus.OK
        }
        return ResponseEntity(person, status)
    }

    @RequestMapping(value = ["/person/{id}"], method = [RequestMethod.PUT])
    fun updatePerson(@PathVariable id: Int, @RequestBody person: Person): ResponseEntity<Unit> {
        agendaService.getPerson(id)?.let {
            agendaService.updatePerson(it.id, person)
            return ResponseEntity(Unit, HttpStatus.ACCEPTED)
        } ?: return ResponseEntity(Unit, HttpStatus.NOT_FOUND)
    }

    @RequestMapping(value = ["/person/{id}"], method = [RequestMethod.DELETE])
    fun deletePerson(@PathVariable id: Int): ResponseEntity<Unit> {
        if (agendaService.getPerson(id) != null) {
            agendaService.deletePerson(id)
            return ResponseEntity(Unit, HttpStatus.OK)
        } else {
            return ResponseEntity(Unit, HttpStatus.NOT_FOUND)
        }
    }

    @RequestMapping(value = ["/agenda"], method = [RequestMethod.GET])
    fun search(@RequestParam(required = false, name = "lastName", defaultValue = "") lastName: String,
                    @RequestParam(required = false, name = "firstName", defaultValue = "") firstName: String,
                     @RequestParam(required = false, name = "telephone", defaultValue = "") telephoneNumber: String):
            ResponseEntity<List<Person>> {
        val personList = agendaService.searchAgenda(lastName, firstName, telephoneNumber)
        var httpStatus = HttpStatus.OK
        if (personList.isEmpty()) {
            httpStatus = HttpStatus.NO_CONTENT
        }
        return ResponseEntity(personList, httpStatus)
    }
}




interfaces

import com.sd.laborator.pojo.Person

interface AgendaService {
    fun getPerson(id: Int) : Person?
    fun createPerson(person: Person)
    fun deletePerson(id: Int)
    fun updatePerson(id: Int, person: Person)
    fun searchAgenda(lastNameFilter: String, firstNameFilter: String, telephoneNumberFilter: String): List<Person>
}
import com.sd.laborator.pojo.Person

interface CacheService {
    // checks if the element is in the cache list
    fun searchExists(lastNameFilter: String, firstNameFilter: String, telephoneNumberFilter: String) : Boolean

    // get the element from the cache list
    fun getSearchCache(lastNameFilter: String, firstNameFilter: String, telephoneNumberFilter: String) : List<Person>

    // store result in cache
    fun storeResult(lastNameFilter: String, firstNameFilter: String, telephoneNumberFilter: String, result:List<Person>)
}



pojo

import java.time.LocalDateTime

data class CacheData(
    var timestamp: LocalDateTime,
    var searchString: String = "",
    var resultList: List<Person>
)
data class DateCustom (
    var years:Int = 0,
    var months:Int = 0,
    var days:Int = 0,
    var hours:Int = 0,
    var minutes:Int = 0,
    var seconds:Int = 0
)
data class Person(
    var id: Int = 0,
    var lastName: String = "",
    var firstName: String = "",
    var telephoneNumber: String = ""
)



services

package com.sd.laborator.services;

import com.sd.laborator.interfaces.AgendaService
import com.sd.laborator.pojo.Person
import org.springframework.stereotype.Service
import java.util.concurrent.ConcurrentHashMap

@Service
class AgendaServiceImpl(private val cacheServiceImpl: CacheServiceImpl) : AgendaService {
    companion object {
        val initialAgenda = arrayOf(
            Person(1, "Hello", "Kotlin", "1234"),
            Person(2, "Hello", "Spring", "5678"),
            Person(3, "Hello", "Microservice", "9101112")
        )
    }

    private val agenda = ConcurrentHashMap<Int, Person>(
        initialAgenda.associateBy { person: Person -> person.id }
    )

    override fun getPerson(id: Int): Person? {
        return agenda[id]
    }

    override fun createPerson(person: Person) {
        agenda[person.id] = person
    }

    override fun deletePerson(id: Int) {
        agenda.remove(id)
    }

    override fun updatePerson(id: Int, person: Person) {
        deletePerson(id)
        createPerson(person)
    }

    override fun searchAgenda(lastNameFilter: String, firstNameFilter: String, telephoneNumberFilter: String): List<Person> {
        if(cacheServiceImpl.searchExists(lastNameFilter, firstNameFilter, telephoneNumberFilter))
        {
            return cacheServiceImpl.getSearchCache(lastNameFilter, firstNameFilter, telephoneNumberFilter)
        }


        val result = agenda.filter {
            it.value.lastName.toLowerCase().contains(lastNameFilter, ignoreCase = true) &&
                it.value.firstName.toLowerCase().contains(firstNameFilter, ignoreCase = true) &&
                    it.value.telephoneNumber.contains(telephoneNumberFilter)
        }.map {
            it.value
        }.toList()

        // store result to cache
        cacheServiceImpl.storeResult(lastNameFilter, firstNameFilter, telephoneNumberFilter, result)

        return result
    }
}

package com.sd.laborator.services;

import com.sd.laborator.interfaces.AgendaService
import com.sd.laborator.interfaces.CacheService
import com.sd.laborator.pojo.CacheData
import com.sd.laborator.pojo.Person
import org.springframework.stereotype.Service
import java.sql.Timestamp
import java.time.LocalDate
import java.time.LocalDateTime
import java.util.concurrent.ConcurrentHashMap

@Service
class CacheServiceImpl(private val localDateTimeUnitConvertorService: LocalDateTimeUnitConvertorService) : CacheService {

    private val cacheList: MutableList<CacheData> = mutableListOf()

    override fun searchExists(lastNameFilter: String, firstNameFilter: String, telephoneNumberFilter: String): Boolean {
        val searchString = "${lastNameFilter}/${firstNameFilter}/${telephoneNumberFilter}"
        val nowTimestamp =  LocalDateTime.now()

        cacheList.forEach {
            if(searchString == it.searchString) {
                val difference = localDateTimeUnitConvertorService.convertToUnitsDifference(it.timestamp, nowTimestamp)
                // mini mangleala, presupunem ca e folosit doar pentru aceasi zi ;)
                if (difference.years == 0 && difference.months == 0 && difference.days == 0 && difference.hours == 0 && difference.minutes < 30) {
                    return true
                }
            }
        }
        return false
    }

    override fun getSearchCache(
        lastNameFilter: String,
        firstNameFilter: String,
        telephoneNumberFilter: String
    ): List<Person> {
        val searchString = "${lastNameFilter}/${firstNameFilter}/${telephoneNumberFilter}"
        val nowTimestamp =  LocalDateTime.now()

        cacheList.forEach {
            if (searchString == it.searchString) {
                val difference = localDateTimeUnitConvertorService.convertToUnitsDifference(it.timestamp, nowTimestamp)

                // mini mangleala, presupunem ca e folosit doar pentru aceasi zi ;)
                if (difference.years == 0 && difference.months == 0 && difference.days == 0 && difference.hours == 0 && difference.minutes < 30) {
                    return it.resultList
                }
            }
        }
        return listOf()
    }

    override fun storeResult(
        lastNameFilter: String,
        firstNameFilter: String,
        telephoneNumberFilter: String,
        result: List<Person>
    ) {

        val searchString = "${lastNameFilter}/${firstNameFilter}/${telephoneNumberFilter}"
        if(!searchExists(lastNameFilter, firstNameFilter, telephoneNumberFilter)){
            cacheList.add(CacheData(
                LocalDateTime.now(),
                searchString,
                result
            ))
        }
    }
}


import com.sd.laborator.pojo.DateCustom
import org.springframework.stereotype.Service
import java.time.LocalDateTime
import java.time.Month
import java.time.temporal.ChronoUnit

@Service
class LocalDateTimeUnitConvertorService {
    // Second is the bigger one
    fun convertToUnitsDifference(fromDateTime: LocalDateTime, toDateTime: LocalDateTime): DateCustom{

        var tempDateTime = LocalDateTime.from(fromDateTime)

        val years = tempDateTime.until(toDateTime, ChronoUnit.YEARS)
        tempDateTime = tempDateTime.plusYears(years)

        val months = tempDateTime.until(toDateTime, ChronoUnit.MONTHS)
        tempDateTime = tempDateTime.plusMonths(months)

        val days = tempDateTime.until(toDateTime, ChronoUnit.DAYS)
        tempDateTime = tempDateTime.plusDays(days)


        val hours = tempDateTime.until(toDateTime, ChronoUnit.HOURS)
        tempDateTime = tempDateTime.plusHours(hours)

        val minutes = tempDateTime.until(toDateTime, ChronoUnit.MINUTES)
        tempDateTime = tempDateTime.plusMinutes(minutes)

        val seconds = tempDateTime.until(toDateTime, ChronoUnit.SECONDS)

        return DateCustom(years.toInt(), months.toInt(), days.toInt(), hours.toInt(), minutes.toInt(), seconds.toInt())
    }

}


Agenda - main

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication

@SpringBootApplication
open class PhoneAgenda

fun main(args: Array<String>) {
    runApplication<PhoneAgenda>(*args)
}
