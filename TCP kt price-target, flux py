server kt


fun main(){
    val socket3rdParty = Socket3rdParty("brl7eb7rh5re1lvco7fg")
    val localSocket = SocketLocal(8888)
    val data = socket3rdParty.getData()
    data.forEach {
        val items = socket3rdParty.getSpecificData(it.get("symbol").toString())
        if(items.isNotEmpty()){
            items.forEach { data->
                Thread.sleep(3000)
                print("n$data\n")
                localSocket.send(data.toString())
            }
        }
    }
    localSocket.closeSockets()
}
class Socket3rdParty(token: String) {
    private val apiUrl = "https://finnhub.io/api/v1/"
    private val pathSymbols = "stock/symbol?exchange=US&token=$token"
    private val pathPrice = "stock/price-target?&token=$token"

    fun getData(): List<JSONObject> {
        return get("$apiUrl$pathSymbols").jsonArray
            .map { JSONObject(it.toString()) }
    }

    fun getSpecificData(symbol: String):List<JSONObject>{
        return try {
            get("$apiUrl$pathPrice&symbol=$symbol")
                .jsonArray
                .map {
                    JSONObject(it.toString())
                }
        }
        catch (e: Throwable){
            listOf()
        }
    }
}

import java.net.ServerSocket

class SocketLocal(port: Int){
    private val localSocket = ServerSocket(port)
    private val pySparkSocket = localSocket.accept()

    fun send(data: String){
        println(data)
        pySparkSocket.getOutputStream().write("$data\n".toByteArray())
    }

    fun closeSockets(){
        localSocket.close()
        pySparkSocket.close()
    }
}






flux py

import json
import os

from pyspark import SparkContext
from pyspark.streaming import StreamingContext
os.environ["PYSPARK_PYTHON"] = "python3"
os.environ["PYSPARK_DRIVER_PYTHON"] = "python3"
os.environ["JAVA_HOME"] = "/usr/lib/jvm/jdk1.8.0_291"


def myPrint(obj):
    for elem in obj:
        print("Symbol:" + elem["symbol"], "\tProfit mediu: "+elem["targetMean"])


def main():
    context = SparkContext(appName="Stream", master="local[*]")
    context.setLogLevel("WARN")

    spark_context = StreamingContext(context, 3)
    data = spark_context.socketTextStream("localhost", 8888)
    profit = 0.0
    json_data = data        .map(lambda x: json.loads(x), )        .filter(lambda x: json_data["targetLow"]/json_data["targetMean"] >= 40)

    json_data.foreachRDD(lambda rdd:  myPrint(rdd.collect()))

    spark_context.start()
    spark_context.awaitTermination()
    spark_context.stop()


if __name__ == "__main__":
    main()
